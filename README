Barely any features yet, but the interpreting part works! Awesome :)

# Grammar

  if       <expression> { <body> }
  print    <expression>

           <expression> : <expression> + <number>
                        | <expression> - <number>
                        | <number>

# Todo

  * Proper memory management / garbage collection:
      Because nodes that aren't executed (like an if
      with false conditions) must be freed recursivly
      too. Maybe a body_free function is enough?
      Also some day everything should be separate
      from the eval function.

  * Stack / Functions:
      Every function call should push declared variables
      onto the stack, after returning the variables
      should be popped.

# Checklist - Adding a new node

  1) nodes.h:   Type declaration
  2) nodes.h:   Node declaration
  3) nodes.h:   Function declaration
  4) nodes.c:   Function definition
  5) main.c:    Eval case definition
  6) lex.l:     Token definition
  7) grammar.y: Grammar definition
